# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# 				:: APPLICATION ROUTES BELLOW ::
# Home page
GET           /                                     @controllers.Application.index()
GET           /about                                @controllers.Application.about()

GET           /login                                @controllers.Application.login()
GET           /logout                               @controllers.Application.logout()
POST          /login                                @controllers.Application.checkLogin()
GET           /util/email                           @controllers.Application.sendEmail()

# 				:: USERS ROUTES BELLOW ::
GET           /user/createprofile                   @controllers.users.UserController.createProfile()
POST          /user/createprofile                   @controllers.users.UserController.updateProfile()

GET           /user/editprofile                     @controllers.users.UserController.editProfile()
POST          /user/editprofile                     @controllers.users.UserController.saveProfile()

# Route for seeing user's public profile
GET           /user/publicprofile/:id               @controllers.users.UserController.publicProfile(id: Long)

# SECURITY FOR FULLY ACTIVE USER ONLY
GET           /user/message                         @controllers.users.UserController.studentList()
GET           /message/:id                          @controllers.users.UserController.newMessage(id: Long)
POST          /message/:id                          @controllers.users.UserController.sendMessage(id: Long)
GET           /allMessage                           @controllers.users.UserController.allMessage()
GET           /message/selected/:id                 @controllers.users.UserController.seeMessage(id: Long)

#				:: ADMIN ROUTES BELLOW ::
# Admin index page
GET           /admin                                @controllers.users.AdminController.index()

# Routes for registering new user
GET           /admin/adduser                        @controllers.users.AdminController.addNewUser()
POST          /admin/adduser                        @controllers.users.AdminController.saveNewUser()

# Route for seeing all users
GET           /admin/allusers                       @controllers.users.AdminController.listOfUser()

# Route for seeing and deleting all errors logged in application
GET           /admin/errors                         @controllers.users.AdminController.seeErrors()
DELETE        /admin/error/:id                      @controllers.users.AdminController.deleteError(id: Long)

# Assign mentor to student
GET           /admin/mentorship                     @controllers.users.AdminController.mentorship()
POST          /admin/mentorship                     @controllers.users.AdminController.saveMentorship()

# See active mentorships and delete it
GET           /admin/activementors                  @controllers.users.AdminController.seeMentorsAndStudents()
DELETE        /admin/activementors/:id              @controllers.users.AdminController.deleteMentorship(id: Long)

# Routes for admin approval of user to join certain course
POST          /admin/approvestudent/:id             @controllers.users.AdminController.approveStudent(id: Long)
GET           /admin/awaitlist                      @controllers.users.AdminController.awaitList()

# Create report field
GET           /admin/createdaily                    @controllers.users.AdminController.genField()
POST          /admin/savefielddaily                 @controllers.users.AdminController.saveField()
DELETE        /admin/deletefield/:id                @controllers.users.AdminController.deleteField(id: Long)

# See submited daily reports
GET           /listReport                           @controllers.users.AdminController.listReport()
DELETE        /listReport/:id                       @controllers.users.AdminController.deleteReport(id: Long)
GET           /listReport/:id                       @controllers.users.AdminController.deleteReport(id: Long)

# Create course
GET           /admin/createcourse                   @controllers.users.AdminController.addCourse()
POST          /admin/createcourse                   @controllers.users.AdminController.saveCourse()

# List of all registered users and option to delete
GET           /admin/delete/:id                     @controllers.users.AdminController.deleteUser(id: Long)
DELETE        /admin/delete/:id                     @controllers.users.AdminController.deleteUser(id: Long)


#				:: TEACHER ROUTES BELLOW ::
# Daily report for teachers
GET           /daily/report                         @controllers.users.TeacherController.dailyReport()
POST          /daily/reportSubmit                   @controllers.users.TeacherController.saveRaport()

#				:: STUDENT ROUTES BELLOW ::
# Students joining course
POST          /student/joincourse                   @controllers.users.StudentController.joinCourse()
POST          /student/joincourse/haveaccess        @controllers.users.StudentController.haveCourseAccess()

# SECURITY FOR FULLY ACTIVE USER ONLY
# 				::COURSE ROUTES BELLOW ::
GET           /user/courses                         @controllers.course.CourseController.allCourses()
GET           /user/class                           @controllers.course.CourseController.course()

# 				:: POST ROUTES BELLOW ::
GET           /post/new                             @controllers.posts.PostController.addPost()
POST          /post/                                @controllers.posts.PostController.savePost()

# Notification for users that applied to course #TODO MOVE TO ADMIN
POST          /notify                               @controllers.Application.getNotification()


# FOR TESTING ONLY
GET           /user/test                            @controllers.users.UserController.test()
GET           /admin/test                           @controllers.users.AdminController.test()
GET           /teacher/test                         @controllers.users.TeacherController.test()
GET           /mentor/test                          @controllers.users.MentorController.test()
GET           /student/test                         @controllers.users.StudentController.test()


# Map static resources from the /public folder to the /assets URL path
GET           /assets/*file                         @controllers.Assets.versioned(path="/public", file: Asset)



